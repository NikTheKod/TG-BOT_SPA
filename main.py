import os
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters, ContextTypes, ConversationHandler

from config import BOT_TOKEN, SUPPORT_IDS, States
from database import TicketSystem

class StalkerSupportBot:
    def __init__(self):
        self.ticket_system = TicketSystem()
        self.active_chats = {}  # {user_id: support_id, support_id: user_id}
    
    def get_main_keyboard(self):
        """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏"""
        return InlineKeyboardMarkup([
            [InlineKeyboardButton("üí¨ –ù–∞–ø–∏—Å–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É", callback_data="start_chat")],
            [InlineKeyboardButton("üìã –ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã", callback_data="faq")],
            [InlineKeyboardButton("üåê –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–æ–≤", callback_data="server_status")]
        ])
    
    async def start(self, update: Update, context):
        user = update.effective_user
        await update.message.reply_text(
            f"üõ†Ô∏è –ü—Ä–∏–≤–µ—Ç, —Å—Ç–∞–ª–∫–µ—Ä {user.first_name}!\n\n"
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É STALKER SPA.\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=self.get_main_keyboard()
        )
    
    async def ticket_command(self, update: Update, context):
        """–ö–æ–º–∞–Ω–¥–∞ /ticket - –æ—Ç–∫—Ä—ã—Ç—å —Ç–∏–∫–µ—Ç"""
        user = update.effective_user
        user_id = user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–π —Ç–∏–∫–µ—Ç
        existing_ticket = self.ticket_system.get_user_ticket(user_id)
        if existing_ticket:
            await update.message.reply_text(
                f"‚ö†Ô∏è –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π —Ç–∏–∫–µ—Ç #{existing_ticket[0]}\n"
                "–î–æ–∂–¥–∏—Ç–µ—Å—å –æ—Ç–≤–µ—Ç–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∏–ª–∏ –∑–∞–∫—Ä–æ–π—Ç–µ —Ç–µ–∫—É—â–∏–π —Ç–∏–∫–µ—Ç.",
                reply_markup=self.get_main_keyboard()
            )
            return
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ç–∏–∫–µ—Ç
        ticket_id = self.ticket_system.create_ticket(user_id, user.username or user.first_name)
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É
        support_message = (
            f"üÜï –ù–û–í–´–ô –¢–ò–ö–ï–¢ –û–¢ –ö–û–ú–ê–ù–î–´ /ticket\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{user.username or 'No username'}\n"
            f"üÜî ID: {user_id}\n"
            f"üìã –¢–∏–∫–µ—Ç: #{ticket_id}\n\n"
            f"–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ —á—Ç–æ–±—ã –æ—Ç–≤–µ—Ç–∏—Ç—å:"
        )
        
        keyboard = [[InlineKeyboardButton("üí¨ –û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"accept_ticket_{user_id}")]]
        
        for support_id in SUPPORT_IDS:
            try:
                await context.bot.send_message(support_id, support_message, reply_markup=InlineKeyboardMarkup(keyboard))
            except Exception as e:
                print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∫—É {support_id}: {e}")
        
        await update.message.reply_text(
            f"‚úÖ –¢–∏–∫–µ—Ç #{ticket_id} —Å–æ–∑–¥–∞–Ω!\n"
            "–û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏. –í—ã –º–æ–∂–µ—Ç–µ –ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä—è–º–æ –∑–¥–µ—Å—å.",
            reply_markup=self.get_main_keyboard()
        )
    
    async def close_ticket_command(self, update: Update, context):
        """–ö–æ–º–∞–Ω–¥–∞ /closeticket - –∑–∞–∫—Ä—ã—Ç—å —Ç–∏–∫–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"""
        user_id = update.effective_user.id
        
        # –ò—â–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —Ç–∏–∫–µ—Ç
        ticket = self.ticket_system.get_user_ticket(user_id)
        if not ticket:
            await update.message.reply_text(
                "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–∏–∫–µ—Ç–æ–≤.",
                reply_markup=self.get_main_keyboard()
            )
            return
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ç–∏–∫–µ—Ç
        self.ticket_system.close_ticket(ticket[0])
        
        # –û—á–∏—â–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç
        if user_id in self.active_chats:
            support_id = self.active_chats[user_id]
            self.active_chats.pop(user_id, None)
            self.active_chats.pop(support_id, None)
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É
            try:
                await context.bot.send_message(support_id, f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–∫—Ä—ã–ª —Ç–∏–∫–µ—Ç #{ticket[0]}")
            except:
                pass
        
        await update.message.reply_text(
            f"‚úÖ –¢–∏–∫–µ—Ç #{ticket[0]} –∑–∞–∫—Ä—ã—Ç.\n"
            "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ!",
            reply_markup=self.get_main_keyboard()
        )
    
    async def admin_close_ticket_command(self, update: Update, context):
        """–ö–æ–º–∞–Ω–¥–∞ /admincloseticket - –∑–∞–∫—Ä—ã—Ç—å —Ç–∏–∫–µ—Ç –∞–¥–º–∏–Ω–æ–º"""
        user_id = update.effective_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞
        if user_id not in SUPPORT_IDS:
            await update.message.reply_text("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏.")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã
        if not context.args:
            await update.message.reply_text("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /admincloseticket <user_id>")
            return
        
        try:
            target_user_id = int(context.args[0])
            ticket = self.ticket_system.get_user_ticket(target_user_id)
            
            if not ticket:
                await update.message.reply_text("‚ùå –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–∏–∫–µ—Ç–æ–≤.")
                return
            
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ç–∏–∫–µ—Ç
            self.ticket_system.close_ticket(ticket[0])
            
            # –û—á–∏—â–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç
            if target_user_id in self.active_chats:
                self.active_chats.pop(target_user_id, None)
                self.active_chats.pop(user_id, None)  # support_id
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            try:
                await context.bot.send_message(
                    target_user_id, 
                    f"‚úÖ –í–∞—à —Ç–∏–∫–µ—Ç #{ticket[0]} –∑–∞–∫—Ä—ã—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π."
                )
            except:
                pass
            
            await update.message.reply_text(f"‚úÖ –¢–∏–∫–µ—Ç #{ticket[0]} –∑–∞–∫—Ä—ã—Ç.")
            
        except ValueError:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π user_id.")
    
    async def start_chat_with_support(self, update: Update, context):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ù–∞–ø–∏—Å–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É'"""
        query = update.callback_query
        await query.answer()  # –£–±–∏—Ä–∞–µ–º "—á–∞—Å–∏–∫–∏"
        
        user = query.from_user
        user_id = user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–π —Ç–∏–∫–µ—Ç
        existing_ticket = self.ticket_system.get_user_ticket(user_id)
        if existing_ticket:
            await query.edit_message_text(
                f"‚ö†Ô∏è –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π —Ç–∏–∫–µ—Ç #{existing_ticket[0]}\n"
                "–î–æ–∂–¥–∏—Ç–µ—Å—å –æ—Ç–≤–µ—Ç–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∏–ª–∏ –∑–∞–∫—Ä–æ–π—Ç–µ —Ç–µ–∫—É—â–∏–π —Ç–∏–∫–µ—Ç –∫–æ–º–∞–Ω–¥–æ–π /closeticket",
                reply_markup=self.get_main_keyboard()
            )
            return
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∏–∫–µ—Ç
        ticket_id = self.ticket_system.create_ticket(user_id, user.username or user.first_name)
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É
        support_message = (
            f"üÜï –ù–û–í–´–ô –ó–ê–ü–†–û–° –í –ü–û–î–î–ï–†–ñ–ö–£\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{user.username or 'No username'}\n"
            f"üÜî ID: {user_id}\n"
            f"üìã –¢–∏–∫–µ—Ç: #{ticket_id}\n\n"
            f"–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ —á—Ç–æ–±—ã –æ—Ç–≤–µ—Ç–∏—Ç—å:"
        )
        
        keyboard = [[InlineKeyboardButton("üí¨ –û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"accept_ticket_{user_id}")]]
        
        for support_id in SUPPORT_IDS:
            try:
                await context.bot.send_message(support_id, support_message, reply_markup=InlineKeyboardMarkup(keyboard))
            except Exception as e:
                print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∫—É {support_id}: {e}")
        
        await query.edit_message_text(
            f"üí¨ –¢–∏–∫–µ—Ç #{ticket_id} —Å–æ–∑–¥–∞–Ω! –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏...\n\n"
            "–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å:",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Ç–∏–∫–µ—Ç", callback_data="cancel_chat")],
                [InlineKeyboardButton("üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ])
        )
        
        return States.AWAITING_SUPPORT_RESPONSE
    
    async def show_faq(self, update: Update, context):
        """–ü–æ–∫–∞–∑–∞—Ç—å —á–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã"""
        query = update.callback_query
        await query.answer()
        
        faq_text = (
            "üìã –ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã STALKER SPA:\n\n"
            "‚ùì –£—Å—Ç–∞–Ω–æ–≤–∫–∞:\n"
            "‚Ä¢ –°–∫–∞—á–∞–π—Ç–µ –ª–∞—É–Ω—á–µ—Ä —Å –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–≥–æ —Å–∞–π—Ç–∞\n"
            "‚Ä¢ –ó–∞–ø—É—Å—Ç–∏—Ç–µ —É—Å—Ç–∞–Ω–æ–≤—â–∏–∫ –æ—Ç –∏–º–µ–Ω–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n\n"
            "üîß –û—à–∏–±–∫–∏:\n"
            "‚Ä¢ –ü–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ DirectX 11\n"
            "‚Ä¢ –û–±–Ω–æ–≤–∏—Ç–µ –¥—Ä–∞–π–≤–µ—Ä–∞ –≤–∏–¥–µ–æ–∫–∞—Ä—Ç—ã\n\n"
            "üéÆ –ú–æ–¥—ã:\n"
            "‚Ä¢ –î–æ—Å—Ç—É–ø–Ω—ã —á–µ—Ä–µ–∑ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –º–æ–¥-–º–µ–Ω–µ–¥–∂–µ—Ä\n\n"
            "–ù—É–∂–Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø–æ–º–æ—â—å? –ù–∞–ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É!"
        )
        
        await query.edit_message_text(
            faq_text,
            reply_markup=self.get_main_keyboard()
        )
    
    async def show_server_status(self, update: Update, context):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–æ–≤"""
        query = update.callback_query
        await query.answer()
        
        status_text = (
            "üåê –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–æ–≤ STALKER SPA:\n\n"
            "üü¢ SPA-1 (–ï–≤—Ä–æ–ø–∞): 145/150 –∏–≥—Ä–æ–∫–æ–≤\n"
            "üü¢ SPA-2 (–†–æ—Å—Å–∏—è): 89/150 –∏–≥—Ä–æ–∫–æ–≤\n"
            "üü° SPA-3 (–ê–∑–∏—è): 67/150 –∏–≥—Ä–æ–∫–æ–≤\n"
            "üî¥ SPA-4 (–ê–º–µ—Ä–∏–∫–∞): –Ω–∞ —Ç–µ—Ö. —Ä–∞–±–æ—Ç–∞—Ö\n\n"
            "–û–±—â–∏–π –æ–Ω–ª–∞–π–Ω: 301 –∏–≥—Ä–æ–∫"
        )
        
        await query.edit_message_text(
            status_text,
            reply_markup=self.get_main_keyboard()
        )
    
    async def show_main_menu(self, update: Update, context):
        """–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        query = update.callback_query
        await query.answer()
        
        user = query.from_user
        await query.edit_message_text(
            f"üõ†Ô∏è –ü—Ä–∏–≤–µ—Ç, —Å—Ç–∞–ª–∫–µ—Ä {user.first_name}!\n\n"
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É STALKER SPA.\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=self.get_main_keyboard()
        )
    
    async def accept_ticket(self, update: Update, context):
        query = update.callback_query
        await query.answer()
        
        support_id = query.from_user.id
        user_id = int(query.data.split('_')[-1])
        
        # –°–≤—è–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–æ–¥–¥–µ—Ä–∂–∫—É
        self.active_chats[user_id] = support_id
        self.active_chats[support_id] = user_id
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∏–∫–µ—Ç
        ticket = self.ticket_system.get_user_ticket(user_id)
        if ticket:
            self.ticket_system.assign_support(ticket[0], support_id)
        
        await query.edit_message_text(
            f"üí¨ –í—ã –ø–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å –∫ —á–∞—Ç—É —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.\n"
            f"–¢–µ–ø–µ—Ä—å –≤—Å–µ –≤–∞—à–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –±—É–¥—É—Ç –ø–µ—Ä–µ—Å—ã–ª–∞—Ç—å—Å—è –µ–º—É.\n\n"
            f"–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:"
        )
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            await context.bot.send_message(
                user_id, 
                "‚úÖ –° –≤–∞–º–∏ –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏. –ú–æ–∂–µ—Ç–µ –æ–±—â–∞—Ç—å—Å—è!",
                reply_markup=self.get_main_keyboard()
            )
        except:
            pass
        
        return States.AWAITING_USER_RESPONSE
    
    async def forward_to_support(self, update: Update, context):
        user_id = update.effective_user.id
        message_text = update.message.text
        
        if user_id in self.active_chats:
            support_id = self.active_chats[user_id]
            try:
                await context.bot.send_message(
                    support_id,
                    f"üë§ –ò–≥—Ä–æ–∫: {message_text}"
                )
                await update.message.reply_text("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ", reply_markup=self.get_main_keyboard())
            except:
                await update.message.reply_text("‚ùå –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Å–µ–π—á–∞—Å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞", reply_markup=self.get_main_keyboard())
        else:
            await update.message.reply_text("‚è≥ –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏...", reply_markup=self.get_main_keyboard())
    
    async def forward_to_user(self, update: Update, context):
        support_id = update.effective_user.id
        message_text = update.message.text
        
        if support_id in self.active_chats:
            user_id = self.active_chats[support_id]
            try:
                await context.bot.send_message(
                    user_id,
                    f"üõ†Ô∏è –ü–æ–¥–¥–µ—Ä–∂–∫–∞: {message_text}"
                )
                await update.message.reply_text("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –∏–≥—Ä–æ–∫—É")
            except:
                await update.message.reply_text("‚ùå –ò–≥—Ä–æ–∫ –æ—Ç–∫–ª—é—á–∏–ª—Å—è")
        else:
            await update.message.reply_text("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤")
    
    async def cancel_chat(self, update: Update, context):
        query = update.callback_query
        await query.answer()
        
        user_id = query.from_user.id
        
        # –û—á–∏—â–∞–µ–º —á–∞—Ç
        if user_id in self.active_chats:
            support_id = self.active_chats[user_id]
            self.active_chats.pop(user_id, None)
            self.active_chats.pop(support_id, None)
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É
            try:
                await context.bot.send_message(support_id, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–≤–µ—Ä—à–∏–ª —á–∞—Ç")
            except:
                pass
        
        await query.edit_message_text(
            "‚ùå –ß–∞—Ç —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∑–∞–≤–µ—Ä—à–µ–Ω",
            reply_markup=self.get_main_keyboard()
        )
        return ConversationHandler.END

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Conversation Handler
def setup_handlers(app):
    bot = StalkerSupportBot()
    
    conv_handler = ConversationHandler(
        entry_points=[
            CallbackQueryHandler(bot.start_chat_with_support, pattern='^start_chat$'),
            CommandHandler('ticket', bot.ticket_command)
        ],
        states={
            States.AWAITING_SUPPORT_RESPONSE: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, bot.forward_to_support),
                CallbackQueryHandler(bot.cancel_chat, pattern='^cancel_chat$'),
                CallbackQueryHandler(bot.show_main_menu, pattern='^main_menu$')
            ],
            States.AWAITING_USER_RESPONSE: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, bot.forward_to_user)
            ]
        },
        fallbacks=[CommandHandler('cancel', bot.cancel_chat)]
    )
    
    # –ö–æ–º–∞–Ω–¥—ã
    app.add_handler(CommandHandler("start", bot.start))
    app.add_handler(CommandHandler("ticket", bot.ticket_command))
    app.add_handler(CommandHandler("closeticket", bot.close_ticket_command))
    app.add_handler(CommandHandler("admincloseticket", bot.admin_close_ticket_command))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback
    app.add_handler(CallbackQueryHandler(bot.accept_ticket, pattern='^accept_ticket_'))
    app.add_handler(CallbackQueryHandler(bot.show_faq, pattern='^faq$'))
    app.add_handler(CallbackQueryHandler(bot.show_server_status, pattern='^server_status$'))
    app.add_handler(CallbackQueryHandler(bot.show_main_menu, pattern='^main_menu$'))
    
    app.add_handler(conv_handler)
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    app.add_handler(MessageHandler(
        filters.TEXT & ~filters.COMMAND & filters.User(SUPPORT_IDS), 
        bot.forward_to_user
    ))
    
    app.add_handler(MessageHandler(
        filters.TEXT & ~filters.COMMAND & ~filters.User(SUPPORT_IDS), 
        bot.forward_to_support
    ))

def main():
    app = Application.builder().token(BOT_TOKEN).build()
    setup_handlers(app)
    
    print("üõ†Ô∏è –ë–æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏ STALKER SPA –∑–∞–ø—É—â–µ–Ω!")
    app.run_polling()

if __name__ == '__main__':
    main()
