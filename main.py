import os
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters, ContextTypes, ConversationHandler

from config import BOT_TOKEN, SUPPORT_IDS, States
from database import TicketSystem

class StalkerSupportBot:
    def __init__(self):
        self.ticket_system = TicketSystem()
        self.active_chats = {}  # {user_id: support_id, support_id: user_id}
    
    async def start(self, update: Update, context):
        user = update.effective_user
        keyboard = [
            [InlineKeyboardButton("üí¨ –ù–∞–ø–∏—Å–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É", callback_data="start_chat")],
            [InlineKeyboardButton("üìã –ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã", callback_data="faq")],
            [InlineKeyboardButton("üåê –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–æ–≤", callback_data="server_status")]
        ]
        
        await update.message.reply_text(
            f"üõ†Ô∏è –ü—Ä–∏–≤–µ—Ç, —Å—Ç–∞–ª–∫–µ—Ä {user.first_name}!\n\n"
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É STALKER SPA.\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    
    async def start_chat_with_support(self, update: Update, context):
        query = update.callback_query
        user = query.from_user
        user_id = user.id
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∏–∫–µ—Ç
        ticket = self.ticket_system.get_user_ticket(user_id)
        if not ticket:
            ticket_id = self.ticket_system.create_ticket(user_id, user.username or user.first_name)
        else:
            ticket_id = ticket[0]
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É
        support_message = (
            f"üÜï –ù–û–í–´–ô –ó–ê–ü–†–û–° –í –ü–û–î–î–ï–†–ñ–ö–£\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{user.username or 'No username'}\n"
            f"üÜî ID: {user_id}\n"
            f"üìã –¢–∏–∫–µ—Ç: #{ticket_id}\n\n"
            f"–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ —á—Ç–æ–±—ã –æ—Ç–≤–µ—Ç–∏—Ç—å:"
        )
        
        keyboard = [[InlineKeyboardButton("üí¨ –û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"accept_ticket_{user_id}")]]
        
        for support_id in SUPPORT_IDS:
            try:
                await context.bot.send_message(support_id, support_message, reply_markup=InlineKeyboardMarkup(keyboard))
            except Exception as e:
                print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∫—É {support_id}: {e}")
        
        await query.edit_message_text(
            "üí¨ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞...\n\n"
            "–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å:",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_chat")]])
        )
        
        return States.AWAITING_SUPPORT_RESPONSE
    
    async def accept_ticket(self, update: Update, context):
        query = update.callback_query
        support_id = query.from_user.id
        user_id = int(query.data.split('_')[-1])
        
        # –°–≤—è–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–æ–¥–¥–µ—Ä–∂–∫—É
        self.active_chats[user_id] = support_id
        self.active_chats[support_id] = user_id
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∏–∫–µ—Ç
        ticket = self.ticket_system.get_user_ticket(user_id)
        if ticket:
            self.ticket_system.assign_support(ticket[0], support_id)
        
        await query.edit_message_text(
            f"üí¨ –í—ã –ø–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å –∫ —á–∞—Ç—É —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.\n"
            f"–¢–µ–ø–µ—Ä—å –≤—Å–µ –≤–∞—à–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –±—É–¥—É—Ç –ø–µ—Ä–µ—Å—ã–ª–∞—Ç—å—Å—è –µ–º—É.\n\n"
            f"–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:"
        )
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            await context.bot.send_message(
                user_id, 
                "‚úÖ –° –≤–∞–º–∏ –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏. –ú–æ–∂–µ—Ç–µ –æ–±—â–∞—Ç—å—Å—è!"
            )
        except:
            pass
        
        return States.AWAITING_USER_RESPONSE
    
    async def forward_to_support(self, update: Update, context):
        user_id = update.effective_user.id
        message_text = update.message.text
        
        if user_id in self.active_chats:
            support_id = self.active_chats[user_id]
            try:
                await context.bot.send_message(
                    support_id,
                    f"üë§ –ò–≥—Ä–æ–∫: {message_text}"
                )
                await update.message.reply_text("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ")
            except:
                await update.message.reply_text("‚ùå –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Å–µ–π—á–∞—Å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
        else:
            await update.message.reply_text("‚è≥ –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏...")
    
    async def forward_to_user(self, update: Update, context):
        support_id = update.effective_user.id
        message_text = update.message.text
        
        if support_id in self.active_chats:
            user_id = self.active_chats[support_id]
            try:
                await context.bot.send_message(
                    user_id,
                    f"üõ†Ô∏è –ü–æ–¥–¥–µ—Ä–∂–∫–∞: {message_text}"
                )
                await update.message.reply_text("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –∏–≥—Ä–æ–∫—É")
            except:
                await update.message.reply_text("‚ùå –ò–≥—Ä–æ–∫ –æ—Ç–∫–ª—é—á–∏–ª—Å—è")
        else:
            await update.message.reply_text("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤")
    
    async def cancel_chat(self, update: Update, context):
        query = update.callback_query
        user_id = query.from_user.id
        
        # –û—á–∏—â–∞–µ–º —á–∞—Ç
        if user_id in self.active_chats:
            support_id = self.active_chats[user_id]
            self.active_chats.pop(user_id, None)
            self.active_chats.pop(support_id, None)
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É
            try:
                await context.bot.send_message(support_id, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–≤–µ—Ä—à–∏–ª —á–∞—Ç")
            except:
                pass
        
        await query.edit_message_text("‚ùå –ß–∞—Ç —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∑–∞–≤–µ—Ä—à–µ–Ω")
        return ConversationHandler.END

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Conversation Handler
def setup_handlers(app):
    bot = StalkerSupportBot()
    
    conv_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(bot.start_chat_with_support, pattern='^start_chat$')],
        states={
            States.AWAITING_SUPPORT_RESPONSE: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, bot.forward_to_support),
                CallbackQueryHandler(bot.cancel_chat, pattern='^cancel_chat$')
            ],
            States.AWAITING_USER_RESPONSE: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, bot.forward_to_user)
            ]
        },
        fallbacks=[CommandHandler('cancel', bot.cancel_chat)]
    )
    
    app.add_handler(CommandHandler("start", bot.start))
    app.add_handler(CallbackQueryHandler(bot.accept_ticket, pattern='^accept_ticket_'))
    app.add_handler(conv_handler)
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏
    app.add_handler(MessageHandler(
        filters.TEXT & ~filters.COMMAND & filters.User(SUPPORT_IDS), 
        bot.forward_to_user
    ))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    app.add_handler(MessageHandler(
        filters.TEXT & ~filters.COMMAND & ~filters.User(SUPPORT_IDS), 
        bot.forward_to_support
    ))

def main():
    app = Application.builder().token(BOT_TOKEN).build()
    setup_handlers(app)
    
    print("üõ†Ô∏è –ë–æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏ STALKER SPA –∑–∞–ø—É—â–µ–Ω!")
    app.run_polling()

if __name__ == '__main__':
    main()
