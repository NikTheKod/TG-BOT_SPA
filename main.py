import logging
import sqlite3
import threading
from datetime import datetime
import telegram
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters, ConversationHandler

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
WAITING_FOR_QUESTION = 1

class TicketSystem:
    def __init__(self, db_path='tickets.db'):
        self.db_path = db_path
        self.conn = sqlite3.connect(db_path, check_same_thread=False)
        self._create_tables()
        self.lock = threading.Lock()

    def _create_tables(self):
        cursor = self.conn.cursor()
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS tickets (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER NOT NULL,
                username TEXT,
                first_name TEXT,
                question TEXT,
                status TEXT DEFAULT 'open',
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        self.conn.commit()
        cursor.close()

    def create_ticket(self, user_id, username, first_name, question):
        with self.lock:
            cursor = self.conn.cursor()
            cursor.execute('''
                INSERT INTO tickets (user_id, username, first_name, question, status)
                VALUES (?, ?, ?, ?, 'open')
            ''', (user_id, username, first_name, question))
            ticket_id = cursor.lastrowid
            self.conn.commit()
            cursor.close()
            return ticket_id

    def get_user_ticket(self, user_id):
        cursor = self.conn.cursor()
        cursor.execute('''
            SELECT id, user_id, username, first_name, question, status, created_at
            FROM tickets 
            WHERE user_id = ? AND status = 'open'
            ORDER BY created_at DESC 
            LIMIT 1
        ''', (user_id,))
        ticket = cursor.fetchone()
        cursor.close()
        return ticket

    def close_ticket(self, ticket_id):
        """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç —Ç–∏–∫–µ—Ç –ø–æ ID"""
        try:
            cursor = self.conn.cursor()
            cursor.execute('DELETE FROM tickets WHERE id = ?', (ticket_id,))
            self.conn.commit()
            cursor.close()
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Ç–∏–∫–µ—Ç–∞: {e}")
            return False

    def close_user_ticket(self, user_id):
        """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–π —Ç–∏–∫–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            cursor = self.conn.cursor()
            cursor.execute('DELETE FROM tickets WHERE user_id = ? AND status = "open"', (user_id,))
            rows_affected = cursor.rowcount
            self.conn.commit()
            cursor.close()
            return rows_affected > 0
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Ç–∏–∫–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            return False

    def get_all_tickets(self):
        cursor = self.conn.cursor()
        cursor.execute('''
            SELECT id, user_id, username, first_name, question, status, created_at
            FROM tickets 
            WHERE status = 'open'
            ORDER BY created_at DESC
        ''')
        tickets = cursor.fetchall()
        cursor.close()
        return tickets

class SupportBot:
    def __init__(self, token, admin_chat_id):
        self.token = token
        self.admin_chat_id = admin_chat_id
        self.application = Application.builder().token(token).build()
        self.ticket_system = TicketSystem()
        
        self.setup_handlers()

    def setup_handlers(self):
        # –ö–æ–º–∞–Ω–¥—ã
        self.application.add_handler(CommandHandler("start", self.start))
        self.application.add_handler(CommandHandler("closeticket", self.close_ticket_command))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
        self.application.add_handler(CallbackQueryHandler(self.button_handler, pattern='^support$'))
        self.application.add_handler(CallbackQueryHandler(self.button_handler, pattern='^faq$'))
        self.application.add_handler(CallbackQueryHandler(self.button_handler, pattern='^status$'))
        self.application.add_handler(CallbackQueryHandler(self.button_handler, pattern='^back$'))
        self.application.add_handler(CallbackQueryHandler(self.show_server_status, pattern='^server_status$'))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏
        self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_user_message))
        
        # ConversationHandler –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∏–∫–µ—Ç–æ–≤
        conv_handler = ConversationHandler(
            entry_points=[CallbackQueryHandler(self.start_support_chat, pattern='^start_support$')],
            states={
                WAITING_FOR_QUESTION: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_support_question)
                ],
            },
            fallbacks=[CommandHandler('cancel', self.cancel_support)],
            per_message=False
        )
        self.application.add_handler(conv_handler)
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—à–∏–±–æ–∫
        self.application.add_error_handler(self.error_handler)

    async def start(self, update: Update, context):
        user = update.effective_user
        keyboard = [
            [InlineKeyboardButton("–ù–∞–ø–∏—Å–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É", callback_data="start_support")],
            [InlineKeyboardButton("–ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã", callback_data="faq")],
            [InlineKeyboardButton("–°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–æ–≤", callback_data="server_status")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        welcome_text = (
            f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}!\n\n"
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É STALKER SPA.\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç:"
        )
        
        await update.message.reply_text(welcome_text, reply_markup=reply_markup)

    async def button_handler(self, update: Update, context):
        query = update.callback_query
        await query.answer()
        
        data = query.data
        
        if data == 'support':
            await self.show_support_options(query)
        elif data == 'faq':
            await self.show_faq(query)
        elif data == 'status':
            await self.show_server_status(query)
        elif data == 'back':
            await self.show_main_menu(query)

    async def show_main_menu(self, query):
        keyboard = [
            [InlineKeyboardButton("–ù–∞–ø–∏—Å–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É", callback_data="start_support")],
            [InlineKeyboardButton("–ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã", callback_data="faq")],
            [InlineKeyboardButton("–°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–æ–≤", callback_data="server_status")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø–æ–¥–¥–µ—Ä–∂–∫–∏ STALKER SPA:\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç:",
            reply_markup=reply_markup
        )

    async def show_support_options(self, query):
        keyboard = [
            [InlineKeyboardButton("–ù–∞—á–∞—Ç—å —á–∞—Ç —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π", callback_data="start_support")],
            [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            "üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞ STALKER SPA\n\n"
            "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –Ω–∞—à–µ–π —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–µ.\n"
            "–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: 5-15 –º–∏–Ω—É—Ç",
            reply_markup=reply_markup
        )

    async def start_support_chat(self, update: Update, context):
        query = update.callback_query
        await query.answer()
        
        user = query.from_user
        ticket = self.ticket_system.get_user_ticket(user.id)
        
        if ticket:
            ticket_text = (
                "‚ö†Ô∏è –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π —Ç–∏–∫–µ—Ç\n\n"
                f"ID —Ç–∏–∫–µ—Ç–∞: #{ticket[0]}\n"
                f"–í–∞—à –≤–æ–ø—Ä–æ—Å: {ticket[4]}\n"
                f"–°–æ–∑–¥–∞–Ω: {ticket[6]}\n\n"
                "–î–æ–∂–¥–∏—Ç–µ—Å—å –æ—Ç–≤–µ—Ç–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∏–ª–∏ –∑–∞–∫—Ä–æ–π—Ç–µ —Ç–µ–∫—É—â–∏–π —Ç–∏–∫–µ—Ç –∫–æ–º–∞–Ω–¥–æ–π /closeticket"
            )
            await query.edit_message_text(ticket_text)
            return ConversationHandler.END
        
        support_text = (
            "üí¨ –ß–∞—Ç —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π\n\n"
            "–û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É –∏–ª–∏ –≤–æ–ø—Ä–æ—Å –ø–æ–¥—Ä–æ–±–Ω–æ.\n"
            "–ú—ã –ø–æ—Å—Ç–∞—Ä–∞–µ–º—Å—è –æ—Ç–≤–µ—Ç–∏—Ç—å –∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ.\n\n"
            "–î–ª—è –æ—Ç–º–µ–Ω—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel"
        )
        
        await query.edit_message_text(support_text)
        return WAITING_FOR_QUESTION

    async def handle_support_question(self, update: Update, context):
        user = update.effective_user
        question = update.message.text
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∏–∫–µ—Ç
        ticket_id = self.ticket_system.create_ticket(
            user.id, 
            user.username, 
            user.first_name, 
            question
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
        admin_message = (
            f"üÜï –ù–æ–≤—ã–π —Ç–∏–∫–µ—Ç #{ticket_id}\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.first_name} (@{user.username or 'N/A'})\n"
            f"üÜî ID: {user.id}\n"
            f"‚ùì –í–æ–ø—Ä–æ—Å: {question}"
        )
        
        try:
            await self.application.bot.send_message(
                chat_id=self.admin_chat_id,
                text=admin_message,
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("–û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"reply_{ticket_id}"),
                    InlineKeyboardButton("–ó–∞–∫—Ä—ã—Ç—å", callback_data=f"close_{ticket_id}")
                ]])
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω—É: {e}")
        
        # –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        success_text = (
            f"‚úÖ –í–∞—à —Ç–∏–∫–µ—Ç #{ticket_id} —Å–æ–∑–¥–∞–Ω!\n\n"
            f"–í–∞—à –≤–æ–ø—Ä–æ—Å: {question}\n\n"
            "–û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏. –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ —ç—Ç–æ–º —á–∞—Ç–µ.\n"
            "–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: 5-15 –º–∏–Ω—É—Ç\n\n"
            "–ß—Ç–æ–±—ã –∑–∞–∫—Ä—ã—Ç—å —Ç–∏–∫–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /closeticket"
        )
        
        await update.message.reply_text(success_text)
        return ConversationHandler.END

    async def cancel_support(self, update: Update, context):
        await update.message.reply_text("–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∏–∫–µ—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        return ConversationHandler.END

    async def close_ticket_command(self, update: Update, context):
        user = update.effective_user
        ticket = self.ticket_system.get_user_ticket(user.id)
        
        if not ticket:
            await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–∏–∫–µ—Ç–æ–≤.")
            return
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π –º–µ—Ç–æ–¥ close_ticket
        if self.ticket_system.close_ticket(ticket[0]):
            await update.message.reply_text("‚úÖ –í–∞—à —Ç–∏–∫–µ—Ç –∑–∞–∫—Ä—ã—Ç.")
        else:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Ç–∏–∫–µ—Ç–∞.")

    async def show_faq(self, query):
        faq_text = (
            "‚ùì –ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã\n\n"
            "1. ‚ùì –ö–∞–∫ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–∞—Ä–æ–ª—å?\n"
            "   ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é '–ó–∞–±—ã–ª–∏ –ø–∞—Ä–æ–ª—å' –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –≤—Ö–æ–¥–∞\n\n"
            "2. ‚ùì –°–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç, —á—Ç–æ –¥–µ–ª–∞—Ç—å?\n"
            "   ‚úÖ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–æ–≤ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–º —Ä–∞–∑–¥–µ–ª–µ\n\n"
            "3. ‚ùì –ö–∞–∫ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å?\n"
            "   ‚úÖ –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ—Ç–æ–¥—ã –æ–ø–ª–∞—Ç—ã: –∫–∞—Ä—Ç–∞, Qiwi, –Ø–Ω–¥–µ–∫—Å.–î–µ–Ω—å–≥–∏\n\n"
            "4. ‚ùì –ù–µ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –ª–∞—É–Ω—á–µ—Ä?\n"
            "   ‚úÖ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å –æ—Ç –∏–º–µ–Ω–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n\n"
            "–ï—Å–ª–∏ –≤—ã –Ω–µ –Ω–∞—à–ª–∏ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å - –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É!"
        )
        
        keyboard = [[InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        try:
            await query.edit_message_text(faq_text, reply_markup=reply_markup)
        except telegram.error.BadRequest as e:
            if "Message is not modified" in str(e):
                pass
            else:
                raise e

    async def show_server_status(self, query):
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ä–µ–∞–ª—å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–µ—Ä–æ–≤
        status_text = (
            "üü¢ –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–æ–≤ STALKER SPA\n\n"
            "‚Ä¢ –ò–≥—Ä–æ–≤–æ–π —Å–µ—Ä–≤–µ—Ä #1: üü¢ ONLINE\n"
            "‚Ä¢ –ò–≥—Ä–æ–≤–æ–π —Å–µ—Ä–≤–µ—Ä #2: üü¢ ONLINE\n"
            "‚Ä¢ –í–µ–±-—Å–∞–π—Ç: üü¢ ONLINE\n"
            "‚Ä¢ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: üü¢ ONLINE\n\n"
            "–û–±–Ω–æ–≤–ª–µ–Ω–æ: " + datetime.now().strftime("%H:%M:%S")
        )
        
        keyboard = [
            [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="server_status")],
            [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        try:
            await query.edit_message_text(status_text, reply_markup=reply_markup)
        except telegram.error.BadRequest as e:
            if "Message is not modified" in str(e):
                # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
                pass
            else:
                raise e

    async def handle_user_message(self, update: Update, context):
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤ –≤ —Ç–∏–∫–µ—Ç–∞—Ö)
        user = update.effective_user
        message_text = update.message.text
        
        ticket = self.ticket_system.get_user_ticket(user.id)
        if ticket:
            # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
            admin_message = (
                f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —Ç–∏–∫–µ—Ç–∞ #{ticket[0]}\n"
                f"üë§ {user.first_name} (@{user.username or 'N/A'}):\n"
                f"{message_text}"
            )
            
            try:
                await self.application.bot.send_message(
                    chat_id=self.admin_chat_id,
                    text=admin_message,
                    reply_markup=InlineKeyboardMarkup([[
                        InlineKeyboardButton("–û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"reply_{ticket[0]}"),
                        InlineKeyboardButton("–ó–∞–∫—Ä—ã—Ç—å", callback_data=f"close_{ticket[0]}")
                    ]])
                )
                await update.message.reply_text("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω—É: {e}")
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è.")

    async def error_handler(self, update: Update, context):
        logger.error(msg="Exception while handling an update:", exc_info=context.error)

    def run(self):
        logger.info("üõ†Ô∏è –ë–æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏ STALKER SPA –∑–∞–ø—É—â–µ–Ω!")
        self.application.run_polling()

if __name__ == '__main__':
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
    BOT_TOKEN = "YOUR_BOT_TOKEN_HERE"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω
    ADMIN_CHAT_ID = "YOUR_ADMIN_CHAT_ID_HERE"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ ID —á–∞—Ç–∞ –∞–¥–º–∏–Ω–∞
    
    bot = SupportBot(BOT_TOKEN, ADMIN_CHAT_ID)
    bot.run()
